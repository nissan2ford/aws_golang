{"version":3,"sources":["../../../src/lib/deployment/parse.js"],"names":["parseDeploymentData","ctx","status","error","archived","service","sls","deployment","SDK","Deployment","provider","getAccountId","accountId","processedInput","options","config","servicePath","serverlessFileName","fs","readFile","serverlessFile","toString","request","StackName","naming","getStackName","cfnStack","logsRole","_","find","Stacks","Outputs","OutputKey","logsRoleArn","OutputValue","set","versionFramework","version","versionEnterprisePlugin","packageJsonVersion","tenantUid","appUid","tenantName","tenant","appName","app","serviceName","stageName","getStage","regionName","getRegion","deploymentUid","type","aws","layers","plugins","modules","custom","safeguards","state","safeguardsResults","secrets","Array","from","secretsUsed","outputs","functions","fnName","fn","deployedFunctionName","name","events","setFunction","description","timeout","arn","handler","memorySize","memory","runtime","environment","Object","keys","role","onError","awsKmsKeyArn","tags","vpc","sub","subDetails","apigResource","endsWith","match","getServiceEndpointRegex","apiId","split","path","http","method","cors","integration","restApiId","assign","websocketApiId","setSubscription","function"],"mappings":"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","sourcesContent":["/*\n * Save Deployment\n * - This uses the new deployment data model.\n */\n\nimport fs from 'fs-extra'\nimport _ from 'lodash'\nimport SDK from '@serverless/platform-sdk'\nimport getServerlessFilePath from './getServerlessFilePath'\nimport { version as packageJsonVersion } from '../../../package.json'\n\n/*\n * Parse Deployment Data\n * - Takes data from the Framework and formats it into our data model\n */\n\nconst parseDeploymentData = async (ctx, status = 'success', error = null, archived = false) => {\n  const { service } = ctx.sls\n  const deployment = new SDK.Deployment()\n\n  const accountId = await ctx.provider.getAccountId()\n  const serverlessFileName = await getServerlessFilePath(\n    ctx.sls.processedInput.options.config,\n    ctx.sls.config.servicePath\n  )\n  const serverlessFile = (await fs.readFile(serverlessFileName)).toString()\n  /*\n   * Add deployment data...\n   */\n\n  if (!archived) {\n    const cfnStack = await ctx.provider.request('CloudFormation', 'describeStacks', {\n      StackName: ctx.provider.naming.getStackName()\n    })\n\n    // get log access role info\n    const logsRole = _.find(\n      cfnStack.Stacks[0].Outputs,\n      ({ OutputKey }) => OutputKey === 'EnterpriseLogAccessIamRole'\n    )\n    const logsRoleArn = logsRole && logsRole.OutputValue\n\n    deployment.set({\n      serverlessFile,\n      serverlessFileName,\n      versionFramework: ctx.sls.version,\n      versionEnterprisePlugin: packageJsonVersion,\n      tenantUid: service.tenantUid,\n      appUid: service.appUid,\n      tenantName: service.tenant,\n      appName: service.app,\n      serviceName: service.service,\n      stageName: ctx.provider.getStage(),\n      regionName: ctx.provider.getRegion(),\n      deploymentUid: ctx.deploymentUid,\n      logsRoleArn,\n      archived,\n      status,\n      provider: {\n        type: 'aws',\n        aws: { accountId }\n        // environment: Object.keys(service.provider.environment || {})\n      },\n      layers: service.layers || {},\n      plugins: service.plugins ? service.plugins.modules || service.plugins : [],\n      custom: service.custom || {},\n      safeguards: ctx.state.safeguardsResults,\n      secrets: Array.from(ctx.state.secretsUsed),\n      outputs: service.outputs,\n      error\n    })\n\n    /*\n     * Add this deployment's functions...\n     */\n\n    for (const fnName in service.functions) {\n      const fn = service.functions[fnName]\n      const deployedFunctionName =\n        fn.name || `${service.service}-${ctx.provider.getStage()}-${fnName}`\n      fn.events = fn.events || []\n\n      // Function\n      deployment.setFunction({\n        name: deployedFunctionName,\n        description: fn.description || null,\n        timeout: fn.timeout,\n        type: 'awsLambda',\n        arn: `arn:aws:lambda:${ctx.provider.getRegion()}:${accountId}:function:${deployedFunctionName}`,\n        custom: {\n          handler: fn.handler,\n          memorySize: fn.memory,\n          runtime: fn.runtime,\n          environment: Object.keys(fn.environment || {}),\n          role: fn.role,\n          onError: fn.onError,\n          awsKmsKeyArn: fn.awsKmsKeyArn,\n          tags: fn.tags || {},\n          vpc: fn.vpc || {},\n          layers: fn.layers || [],\n          name: fn.name || fnName\n        }\n      })\n\n      /*\n       * Add this functions's subscriptions...\n       */\n\n      for (const sub of fn.events) {\n        let subDetails = {}\n        let type\n        if (typeof sub === 'string') {\n          type = sub\n        } else {\n          type = Object.keys(sub)[0]\n          if (type === 'http') {\n            const apigResource = _.find(\n              cfnStack.Stacks[0].Outputs,\n              ({ OutputKey }) =>\n                !OutputKey.endsWith('Websocket') &&\n                OutputKey.match(ctx.provider.naming.getServiceEndpointRegex())\n            )\n            const apiId =\n              apigResource && apigResource.OutputValue.split('https://')[1].split('.')[0]\n            subDetails = {\n              path: sub.http.path,\n              method: sub.http.method,\n              cors: sub.http.cors,\n              integration: sub.http.integration,\n              restApiId: apiId\n            }\n          } else if (sub[type] instanceof Object) {\n            Object.assign(subDetails, sub[type])\n          } else {\n            Object.assign(subDetails, { [type]: sub[type] })\n          }\n          if (type === 'websocket') {\n            const apigResource = _.find(\n              cfnStack.Stacks[0].Outputs,\n              ({ OutputKey }) =>\n                OutputKey.endsWith('Websocket') &&\n                OutputKey.match(ctx.provider.naming.getServiceEndpointRegex())\n            )\n            const apiId = apigResource && apigResource.OutputValue.split('wss://')[1].split('.')[0]\n            subDetails.websocketApiId = apiId\n          }\n        }\n\n        deployment.setSubscription({ type, function: deployedFunctionName, ...subDetails })\n      }\n    }\n  } else {\n    deployment.set({\n      versionFramework: ctx.sls.version,\n      versionEnterprisePlugin: packageJsonVersion,\n      tenantUid: service.tenantUid,\n      appUid: service.appUid,\n      tenantName: service.tenant,\n      appName: service.app,\n      serviceName: service.service,\n      stageName: ctx.provider.getStage(),\n      regionName: ctx.provider.getRegion(),\n      archived,\n      status,\n      secrets: Array.from(ctx.state.secretsUsed),\n      error\n    })\n  }\n\n  return deployment\n}\n\nexport default parseDeploymentData\n"],"file":"parse.js"}