package main

import (
	"github.com/aws/aws-lambda-go/lambda"

	"os"
	"fmt"
	"flag"
	"strings"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/service/ec2"

)

type EC2opedata struct {
	argAction string `json:"Action"`
	argInstanceID string `json:"InstanceID"`
}


func Handler(ec2ope *EC2opedata) (Response, error) {

	svc := ec2.New(session.New())

	input := ec2.StartinstancesInput{
		InstanceIds: []*string{
			aws.String(ec2ope.argInstanceID),
		},
	}

	if ec2ope.Action == "start" {
		
		result, err := svc.StartInstances(input)

	} else if ec2ope.Action == "stop" {
	
		result, err := svc.StopInstances(input)

	}

	if err != nil {
		if aerr, ok := err.(awserr.Error); ok {
			switch aerr.Code() {
			default:
				fmt.Println(aerr.Error())
			}
		} else {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println(err.Error())
		}

	return Response{
		Message: ec2ope.Action+"instance successfully!",
	}, nil
}

func main() {
	lambda.Start(Handler)
}
